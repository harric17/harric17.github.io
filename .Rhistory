text(fit,cex=1.5,use.n=F)
fit = rpart(dcctx~.,data=data)
plot(fit,uniform=T,margin=.02)
text(fit,cex=.8,use.n=F,all=F,fancy=T)
plot(fit,uniform=T,margin=.02)
text(fit,cex=1,use.n=F,all=F,fancy=T)
plot(fit,uniform=T,margin=.02)
text(fit,cex=2,use.n=F,all=F,fancy=T)
plot(fit,uniform=T,margin=.02)
text(fit,cex=1.5,use.n=F,all=F,fancy=T)
fit = rpart(dcctx~.,data=data)
plot(fit,uniform=T,margin=.02)
text(fit,cex=1.2,use.n=F,all=F,fancy=T)
plot(fit,uniform=T,margin=.02)
text(fit,cex=1.1,use.n=F,all=F,fancy=T)
plot(fit,uniform=T,margin=.01)
text(fit,cex=1.1,use.n=F,all=F,fancy=T)
plot(fit,uniform=T,margin=.05)
text(fit,cex=1.1,use.n=F,all=F,fancy=T)
plot(fit,uniform=T,margin=.1)
text(fit,cex=1.1,use.n=F,all=F,fancy=T)
plot(fit,uniform=T,margin=.1)
text(fit,cex=1.1,use.n=F,all=F,fancy=T)
plot(fit,uniform=T,margin=.2)
text(fit,cex=1.1,use.n=F,all=F,fancy=T)
plot(fit,uniform=T,margin=.08)
text(fit,cex=1.1,use.n=F,all=F,fancy=T)
plot(fit,uniform=T,margin=.05)
text(fit,cex=1.1,use.n=F,all=F,fancy=T)
plot(fit,uniform=T,margin=.01)
text(fit,cex=1.1,use.n=F,all=F,fancy=T)
plot(fit,uniform=T,margin=.03)
text(fit,cex=1.1,use.n=F,all=F,fancy=T)
plot(fit,uniform=T,margin=.05)
text(fit,cex=1.1,use.n=F,all=F,fancy=T)
plot(fit,uniform=T,margin=.055)
text(fit,cex=1.1,use.n=F,all=F,fancy=T)
plot(fit,uniform=T,margin=.06)
text(fit,cex=1.1,use.n=F,all=F,fancy=T)
text(fit,cex=1.1,use.n=F,all=F,fancy=T,splits=F)
plot(fit,uniform=T,margin=.06)
text(fit,cex=1.1,use.n=F,all=F,fancy=T,splits=F)
text(fit,cex=1.1,use.n=F,all=T,fancy=T,splits=F)
text(fit,cex=1.1,use.n=F,all=F,fancy=T,splits=F)
plot(fit,uniform=T,margin=.06)
text(fit,cex=1.1,use.n=F,all=F,fancy=T,splits=F)
text(fit,cex=1.1,use.n=F,all=F,fancy=T,splits=T)
text(fit,cex=1.1,use.n=F,all=F,fancy=T,splits=T,pretty=T)
plot(fit,uniform=T,margin=.06)
text(fit,cex=1.1,use.n=F,all=F,fancy=T,splits=T,pretty=T)
text(fit,cex=1.1,use.n=F,all=F,fancy=T,splits=T,pretty=F)
plot(fit,uniform=T,margin=.06)
text(fit,cex=1.1,use.n=F,all=F,fancy=T,splits=T,pretty=F)
text(fit,cex=1.1,use.n=F,all=F,fancy=T,splits=T)
plot(fit,uniform=T,margin=.06)
text(fit,cex=1.1,use.n=F,all=F,fancy=T,splits=T)
text(fit,cex=1.1,use.n=F,all=F,fancy=T,splits=T,fwidth=.5)
plot(fit,uniform=T,margin=.06)
text(fit,cex=1.1,use.n=F,all=F,fancy=T,splits=T,fwidth=.5)
plot(fit,uniform=T,margin=.06)
text(fit,cex=1.1,use.n=F,all=F,fancy=T,splits=T,fwidth=.5,fheight=.5)
plot(fit,uniform=T,margin=.06)
text(fit,cex=1.1,use.n=F,all=F,fancy=T,splits=T,fwidth=.5,fheight=.5)
text(fit,cex=1.1,use.n=F,all=F,bg=3,fancy=T,splits=T,fwidth=.5,fheight=.5)
text(fit,cex=1.1,use.n=F,all=F,bg=3,fancy=T,splits=F,fwidth=.5,fheight=.5)
text(fit,cex=1.1,use.n=F,all=F,bg=3,fancy=T,splits=F,fwidth=.5,fheight=.5)
plot(fit,uniform=T,margin=.06)
text(fit,cex=1.1,use.n=F,all=F,bg=3,fancy=T,splits=F,fwidth=.5,fheight=.5)
plot(fit,uniform=T,margin=.06)
text(fit,cex=1.1,use.n=F,all=F,bg=3,fancy=T,splits=F,fwidth=.5,fheight=.5)
text(fit,cex=1.1,use.n=F,all=F,bg=3,fancy=T,splits=F,fwidth=.5,fheight=.8)
text(fit,cex=1.1,use.n=F,all=F,bg=3,fancy=T,splits=F,fwidth=.55,fheight=.8)
text(fit,cex=1.1,use.n=F,all=F,bg=3,fancy=T,splits=F,fwidth=.6,fheight=.8)
text(fit,cex=1.1,use.n=F,all=F,bg=2,fancy=T,splits=F,fwidth=.6,fheight=.8)
text(fit,cex=1.1,use.n=F,all=F,bg=1,fancy=T,splits=F,fwidth=.6,fheight=.8)
text(fit,cex=1.1,use.n=F,all=F,bg=4,fancy=T,splits=F,fwidth=.6,fheight=.8)
text(fit,cex=1.1,use.n=F,all=F,bg=5,fancy=T,splits=F,fwidth=.6,fheight=.8)
text(fit,cex=1.1,use.n=F,all=F,bg=6,fancy=T,splits=F,fwidth=.6,fheight=.8)
text(fit,cex=1.1,use.n=F,all=F,bg=7,fancy=T,splits=F,fwidth=.6,fheight=.8)
text(fit,cex=1.1,use.n=F,all=F,bg=8,fancy=T,splits=F,fwidth=.6,fheight=.8)
text(fit,cex=1.1,use.n=F,all=T,bg=8,fancy=T,splits=F,fwidth=.6,fheight=.8)
text(fit,cex=1.1,use.n=F,all=F,bg=8,fancy=T,splits=T,fwidth=.6,fheight=.8)
plot(fit,uniform=F,margin=.06)
text(fit,cex=1.1,use.n=F,all=F,bg=8,fancy=T,splits=T,fwidth=.6,fheight=.8)
plot(fit,uniform=T,margin=.06)
text(fit,cex=1.1,use.n=F,all=F,bg=8,fancy=T,splits=T,fwidth=.6,fheight=.8)
plot(fit,uniform=T,margin=.06,branch=.2)
text(fit,cex=1.1,use.n=F,all=F,bg=8,fancy=T,splits=T,fwidth=.6,fheight=.8)
plot(fit,uniform=F,margin=.06,branch=.2)
text(fit,cex=1.1,use.n=F,all=F,bg=8,fancy=T,splits=T,fwidth=.6,fheight=.8)
plot(fit,uniform=F,margin=.06,branch=.4)
text(fit,cex=1.1,use.n=F,all=F,bg=8,fancy=T,splits=T,fwidth=.6,fheight=.8)
plot(fit,uniform=F,margin=.06,branch=.9)
text(fit,cex=1.1,use.n=F,all=F,bg=8,fancy=T,splits=T,fwidth=.6,fheight=.8)
plot(fit,uniform=T,margin=.06,branch=.9)
plot(fit,uniform=T,margin=.06,branch=.9)
text(fit,cex=1.1,use.n=F,all=F,bg=8,fancy=T,splits=T,fwidth=.6,fheight=.8)
text(fit,cex=1.1,compress=F,use.n=F,all=F,bg=8,fancy=T,splits=T,fwidth=.6,fheight=.8)
plot(fit,uniform=T,compress=F,margin=.06,branch=.9)
text(fit,cex=1.1,use.n=F,all=F,bg=8,fancy=T,splits=T,fwidth=.6,fheight=.8)
plot(fit,uniform=T,compress=T,margin=.06,branch=.9)
text(fit,cex=1.1,use.n=F,all=F,bg=8,fancy=T,splits=T,fwidth=.6,fheight=.8)
plot(fit,uniform=T,compress=T,margin=.06,branch=.9)
text(fit,cex=1.1,use.n=F,all=F,bg=8,fancy=T,splits=T,fwidth=.6,fheight=.8)
plot(fit,uniform=T,compress=T,margin=.08,branch=.9)
text(fit,cex=1.1,use.n=F,all=F,bg=8,fancy=T,splits=T,fwidth=.6,fheight=.8)
plot(fit,uniform=T,compress=T,margin=.07,branch=.9)
text(fit,cex=1.1,use.n=F,all=F,bg=8,fancy=T,splits=T,fwidth=.6,fheight=.8)
plot(fit,uniform=T,compress=T,margin=.075,branch=.9)
text(fit,cex=1.1,use.n=F,all=F,bg=8,fancy=T,splits=T,fwidth=.6,fheight=.8)
plot(fit,uniform=T,compress=T,margin=.078,branch=.9)
text(fit,cex=1.1,use.n=F,all=F,bg=8,fancy=T,splits=T,fwidth=.6,fheight=.8)
data$country=NULL
fit = rpart(dcctx~.,data=data)
plot(fit,uniform=T,compress=T,margin=.078,branch=.9)
text(fit,cex=1.1,use.n=F,all=F,bg=8,fancy=T,splits=T,fwidth=.6,fheight=.8)
plot(fit,uniform=T,compress=T,margin=.078,branch=.9)
text(fit,cex=1.1,use.n=F,all=F,bg=8,fancy=T,splits=T,fwidth=.7,fheight=.8)
plot(fit,uniform=T,compress=T,margin=.078,branch=.9)
text(fit,cex=1.5,use.n=F,all=F,bg=8,fancy=T,splits=T,fwidth=.7,fheight=.8)
plot(fit,uniform=T,compress=T,margin=.078,branch=.9)
text(fit,cex=1.5,use.n=F,all=F,bg=8,fancy=T,splits=T,fwidth=.7,fheight=.8)
text(fit,cex=1.5,use.n=F,all=F,bg=8,fancy=T,splits=T,fwidth=.8,fheight=.8)
text(fit,cex=1.5,use.n=F,all=F,bg=8,fancy=T,splits=T,fwidth=.9,fheight=.8)
plot(fit,uniform=T,compress=T,margin=.08,branch=.9)
text(fit,cex=1.5,use.n=F,all=F,bg=8,fancy=T,splits=T,fwidth=.9,fheight=.8)
plot(fit,uniform=T,compress=T,margin=.09,branch=.9)
text(fit,cex=1.5,use.n=F,all=F,bg=8,fancy=T,splits=T,fwidth=.9,fheight=.8)
plot(fit,uniform=T,compress=T,margin=.095,branch=.9)
text(fit,cex=1.5,use.n=F,all=F,bg=8,fancy=T,splits=T,fwidth=.9,fheight=.8)
plot(fit,uniform=T,compress=T,margin=.095,branch=.9)
text(fit,cex=1.5,use.n=F,all=F,bg=8,fancy=T,splits=T,fwidth=.9,fheight=1)
plot(fit,uniform=T,compress=T,margin=.095,branch=.9)
text(fit,cex=1.5,use.n=F,all=F,bg=8,fancy=T,splits=T,fwidth=.9,fheight=.8)
text(fit,cex=1.5,use.n=F,all=F,bg=8,fancy=T,splits=T,fwidth=.9,fheight=.2)
plot(fit,uniform=T,compress=T,margin=.095,branch=.9)
text(fit,cex=1.5,use.n=F,all=F,bg=8,fancy=T,splits=T,fwidth=.9,fheight=.2)
plot(fit,uniform=T,compress=T,margin=.095,branch=.9)
text(fit,cex=1.5,use.n=F,all=F,bg=8,fancy=T,splits=T,fwidth=.9,fheight=1.5)
plot(fit,uniform=T,compress=T,margin=.095,branch=.9)
text(fit,cex=1.5,use.n=F,all=F,bg=8,fancy=T,splits=T,fwidth=.9,fheight=1.9)
text(fit,cex=1.5,use.n=F,all=F,bg=8,fancy=T,splits=T,fwidth=.9,fheight=2)
plot(fit,uniform=T,compress=T,margin=.095,branch=.9)
text(fit,cex=1.5,use.n=F,all=F,bg=8,fancy=T,splits=T,fwidth=.9,fheight=2)
plot(fit,uniform=T,compress=T,margin=.09,branch=.9)
text(fit,cex=1.5,use.n=F,all=F,bg=8,fancy=T,splits=T,fwidth=.9,fheight=2)
plot(fit,uniform=T,compress=T,margin=.092,branch=.9)
text(fit,cex=1.5,use.n=F,all=F,bg=8,fancy=T,splits=T,fwidth=.9,fheight=2)
plot(fit,uniform=T,compress=T,margin=.093,branch=.9)
text(fit,cex=1.5,use.n=F,all=F,bg=8,fancy=T,splits=T,fwidth=.9,fheight=2)
plot(fit,uniform=T,compress=T,margin=.093,branch=.7)
text(fit,cex=1.5,use.n=F,all=F,bg=8,fancy=T,splits=T,fwidth=.9,fheight=2)
plot(fit,uniform=F,compress=T,margin=.093,branch=.7)
text(fit,cex=1.5,use.n=F,all=F,bg=8,fancy=T,splits=T,fwidth=.9,fheight=2)
T
T
plot(fit,uniform=T,compress=T,margin=.093,branch=.7)
text(fit,cex=1.5,use.n=F,all=F,bg=8,fancy=T,splits=T,fwidth=.9,fheight=2)
data$rspindi=NULL
fit = rpart(dcctx~.,data=data)
plot(fit,uniform=T,compress=T,margin=.093,branch=.7)
text(fit,cex=1.5,use.n=F,all=F,bg=8,fancy=T,splits=T,fwidth=.9,fheight=2)
data$dkabrt=NULL
fit = rpart(dcctx~.,data=data)
plot(fit,uniform=T,compress=T,margin=.093,branch=.7)
text(fit,cex=1.5,use.n=F,all=F,bg=8,fancy=T,splits=T,fwidth=.9,fheight=2)
plot(prune(fit,cp=7))
plot(prune(fit,cp=7))
fit2 = prune(fit,cp=7)
plot(fit2,uniform=T,compress=T,margin=.093,branch=.7)
plotcp(fit)
fit2 = prune(fit,cp=26)
plot(fit2,uniform=T,compress=T,margin=.093,branch=.7)
fit2 = prune(fit,cp=1)
plot(fit2,uniform=T,compress=T,margin=.093,branch=.7)
printcp(fit)
fit2 = prune(fit,cp=.017)
plot(fit2,uniform=T,compress=T,margin=.093,branch=.7)
text(fit2,cex=1.5,use.n=F,all=F,bg=8,fancy=T,splits=T,fwidth=.9,fheight=2)
library(randomForest)
#Create your forest
set.seed(424)
fit = randomForest(Species~.,data=iris, ntree=1000, mtry = 2, sampsize = 100)
print(fit)
fit = randomForest(Species~.,data=iris, ntree=1000, mtry = 2, sampsize = 100)
library(randomForest)
#Create your forest
set.seed(424)
fit = randomForest(Species~.,data=iris, ntree=1000, mtry = 2, sampsize = 100)
print(fit)
library(randomForest)
set.seed(424)
library(Hmisc)
data = sasxport.get("C:/Users/harric17/Desktop/Presentations/SGC2014/datasets/tdm2.xpt")
dim(data)
head(data)
lapply(data,class)
names(data)
class(data$dcctx)
data$country=NULL
data$dkabrt=NULL
data$rspindi=NULL
fit = randomForest(dcctx~.,data=na.roughfix(data), ntree=10000)
varImpPlot(fit)
data$brspi=NULL
set.seed(424)
fit = randomForest(dcctx~.,data=na.roughfix(data), ntree=10000)
varImpPlot(fit)
plot(fit$err.rate[,1],type="l",col="blue", xlab="Number of Trees",ylab="OOB Error Rate")
set.seed(424)
fit = randomForest(dcctx~.,data=na.roughfix(data), ntree=1000)
plot(fit$err.rate[,1],type="l",col="blue", xlab="Number of Trees",ylab="OOB Error Rate")
varImpPlot(fit)
fit = randomForest(dcctx~.,data=na.roughfix(data), ntree=5000)
plot(fit$err.rate[,1],type="l",col="blue", xlab="Number of Trees",ylab="OOB Error Rate")
varImpPlot(fit)
plot(fit$err.rate[,1],type="l",col="blue", xlab="Number of Trees",ylab="OOB Error Rate")
varImpPlot(fit)
plot(fit$err.rate[,1],type="l",col="blue", xlab="Number of Trees",ylab="OOB Error Rate")
plot(fit$err.rate[,1],type="l",col="blue", xlab="Number of Trees",ylab="OOB Error Rate")
varImpPlot(fit)
names(fit)
fit$importance
sort(fit$importance)
sort(fit$importance,descending)
sort(fit$importance,decreasing=T)
varImpPlot(fit,n.var=10)
varImpPlot(fit,n.var=20)
varImpPlot(fit,n.var=25)
varImpPlot(fit,n.var=25,cex=1.5)
varImpPlot(fit,n.var=25,cex=1.5)
varImpPlot(fit,n.var=23,cex=1.5)
Performance <-
matrix(c(794, 86, 150, 570),
nrow = 2,
dimnames = list("1st Survey" = c("Approve", "Disapprove"),
"2nd Survey" = c("Approve", "Disapprove")))
Performance
mytable <-  matrix(c(9, 22, 1810, 6400), nrow = 2)
mytable
mytable <-  as.table(matrix(c(9, 22, 1810, 6400), nrow = 2))
mytable
prop.test(mytable)
mytable <-  as.table(matrix(c(9, 22, 1810, 6400), nrow = 2))
rownames(mytable)[1] = "H"
rownames(mytable)[1] = "AB"
mytable
mytable <-  as.table(matrix(c(9, 22, 1810, 6400), nrow = 2))
rownames(mytable)[1] = "H"
rownames(mytable)[2] = "AB"
mytable
mytable <-  as.table(matrix(c(9, 22, 1810, 6400), nrow = 2))
rownames(mytable)[1] = "H"
rownames(mytable)[2] = "AB"
colnames(mytable)[1] = "vs. Buerhle"
colnames(mytable)[2] = "vs. others"
mytable
prop.test(mytable)
library(caret)
library(caret)
library(kernlab)
library(kernlab)
install.packages("kernlab")
library(kernlab)
library(kernlab)
data(spam)
inTrain = createDataPartition(y=spam$type,p=.75,list=FALSE)
training = spam[inTrain,]
testing = spam[-inTrain,]
dim(training)
dim(testing)
set.seed(32343)
modelFit = train(type ~.,data=training,method="glm")
set.seed(32343)
modelFit = train(type ~ ., data=training, method="glm")
install.packages("e1071")
library(e1071)
modelFit = train(type ~ ., data=training, method="glm")
warnings()
modelFit
library(caret)
modelFit$finalModel
predictions = predict(modelFit,newdata=testing)
predictions
confusionMatrix(predictions,testing$type)
set.seed(32323)
folds = createFolds(y=spam$type,k=10,list=TRUE,returnTrain=TRUE)
library(caret)
library(e1071)
library(kernlab)
data(spam)
inTrain = createDataPartition(y=spam$type,p=.75,list=FALSE)
training = spam[inTrain,]
testing = spam[-inTrain,]
dim(training)
set.seed(32323)
folds = createFolds(y=spam$type,k=10,list=TRUE,returnTrain=TRUE)
sapply(folds,length)
folds = createFolds(y=spam$type,k=10,list=TRUE,returnTrain=FALSE)
set.seed(32323)
folds = createFolds(y=spam$type,k=10,list=TRUE,returnTrain=FALSE)
sapply(folds,length)
folds = createTimeSlices(y=time,initialWindow=20,horizon=10)
set.seed(32323)
tme = 1:1000
folds = createTimeSlices(y=tme,initialWindow=20,horizon=10)
folds
modelFit = train(type~.,data=training,method="glm")
modelFit = train(type~.,data=training,method="glm")
install.packages("ISLR")
library(ISLR)
library(ggplot2)
library(caret)
data(Wage)
summary(Wage)
inTrain = createDataPartition(y=Wage$wage,p=.7,list=FALSE)
training = Wage[inTrain,]
testing = Wage[-inTrain,]
dim(training)
featurePlot(x=training[,c("age","education","jobclass")],y=training$wage,plot="pairs")
qplot(age,wage,data=training)
qplot(age,wage,data=training,color=jobclass)
qplot(age,wage,data=training,color=jobclass)+geom_smooth(method="lm",formula=y~x)
qplot(age,wage,data=training,color=education)+geom_smooth(method="lm",formula=y~x)
library(Hmisc)
cutWage = cut2(training$wage,g=3)
table(cutWage)
qplot(cutWage,age,data=training,fill=cutWage,geom=c("boxplot"))
qplot(cutWage,age,data=training,fill=cutWage,geom=c("boxplot","jitter"))
qplot(wage,color=education,data=training,geom="density")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[testIndex,]
testing = adData[-testIndex,]
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
inTrain
training = mixtures[trainIndex,]
testing = mixtures[-trainIndex,]
mixtures
names(mixtures)
qplot(cutWage,age,data=training,fill=cutWage,geom=c("boxplot","jitter"))
qplot(cutWage,age,data=training,fill=cutWage,geom=c("boxplot","jitter"))
cutWage = cut2(training$wage,g=3)#makes cuts to the data based on quantiles
qplot(cutWage,age,data=training,fill=cutWage,geom=c("boxplot","jitter"))
cutWage = cut2(training$wage,g=3)#makes cuts to the data based on quantiles
cutWage = cut2(training$wage,g=3)
=
cutWage = cut2(training$wage,g=3)
inTrain = createDataPartition(y=Wage$wage,p=.7,list=FALSE)
training = Wage[inTrain,]
testing = Wage[-inTrain,]
dim(training)
featurePlot(x=training[,c("age","education","jobclass")],y=training$wage,plot="pairs")
qplot(age,wage,data=training,color=jobclass)
qplot(age,wage,data=training,color=education)+geom_smooth(method="lm",formula=y~x)
cutWage = cut2(training$wage,g=3)
#makes cuts to the data based on quantiles
table(cutWage)
qplot(cutWage,age,data=training,fill=cutWage,geom=c("boxplot","jitter"))
qplot(age,wage,data=training,color=jobclass)
qplot(CompressiveStrength,FlyAsh,data=training)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[trainIndex,]
testing = mixtures[-trainIndex,]
qplot(CompressiveStrength,FlyAsh,data=training)
mixtures
names(mixtures)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[trainIndex,]
testing = mixtures[-trainIndex,]
names(mixtures)
qplot(CompressiveStrength,FlyAsh,data=training)
names(training)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[trainIndex,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[inTrain,]
testing = mixtures[-inTrain,]
names(mixtures)
qplot(CompressiveStrength,FlyAsh,data=training)
names(training)
levels(mixtures$FlyAsh)
mixtures$FlyAsh
cutFly = cut2(mictures$FlyAsh,g=2)
cutFly = cut2(mixtures$FlyAsh,g=2)
qplot(CompressiveStrength,FlyAsh,data=training,color=cutFly)
cutFly
cutFly = cut2(mixtures$FlyAsh,g=3)
table(mixtures$FlyAsh)
)
qplot(CompressiveStrength,FlyAsh,data=training)
qplot(y=CompressiveStrength,x=FlyAsh,data=training)
names(mixtures)
mixtures$ind = 1:length(mixtures)
mixtures$myind = 1:length(mixtures)
length(mixtures)
mixtures$myind = 1:dim(mixtures)[2]
mixtures$myind = 1:dim(mixtures)[1]
qplot(y=CompressiveStrength,x=myind,data=training)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
mixtures$myind = 1:dim(mixtures)[1]
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[inTrain,]
testing = mixtures[-inTrain,]
names(mixtures)
qplot(y=CompressiveStrength,x=myind,data=training)
cutFly = cut2(training$FlyAsh,g=3)
qplot(y=CompressiveStrength,x=myind,data=training,color=cutFly)
cutFly = cut2(training$FlyAsh,g=4)
qplot(y=CompressiveStrength,x=myind,data=training,color=cutFly)
cutFly = cut2(training$FlyAsh,g=5)
qplot(y=CompressiveStrength,x=myind,data=training,color=cutFly)
cutFly = cut2(training$FlyAsh,g=10)
qplot(y=CompressiveStrength,x=myind,data=training,color=cutFly)
cutFly = cut2(training$FlyAsh,g=100)
qplot(y=CompressiveStrength,x=myind,data=training,color=cutFly)
cutFly = cut2(training$FlyAsh,g=3)
qplot(y=CompressiveStrength,x=myind,data=training,color=cutFly)
cutFly = cut2(training$FlyAsh,g=2)
qplot(y=CompressiveStrength,x=myind,data=training,color=cutFly)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training)
hist(training$SuperPlasticizer)
training$SuperPlasticizer
names(training)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
training$SuperPlasticizer
head(training$Superplasticizer)
levels(training$Superplasticizer)
table(training$Superplasticizer)
min(training$Superplasticizer)
hist(training$Superplasticizer)
hist(log(training$Superplasticizer+1))
author("machine")
library(devtools)
library(slidify)
author("machine")
setwd("C:/Users/harric17/Documents/GitHub/harric17.github.io")
slidify('index.Rmd')
setwd("C:/Users/harric17/Documents/GitHub/harric17.github.io")
setwd("C:/Users/harric17/Documents/GitHub/harric17.github.io")
slidify('index.Rmd')
